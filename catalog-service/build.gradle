plugins {
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'java'
}

ext {
	springCloudVersion = "2023.0.3"
	set('testcontainerVersion', "1.17.3")
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

description = 'Provides functionality for managing the books in the catalog.'

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.18.0'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation "org.testcontainers:mariadb"
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'

	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"

		mavenBom "org.testcontainers:testcontainers-bom:${testcontainerVersion}"
	}
}

bootBuildImage {
	builder = "docker.io/paketobuildpacks/builder-jammy-base"
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
